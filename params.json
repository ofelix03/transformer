{
  "name": "Transformer",
  "tagline": "A simple associative (i.e. a key:value pair) data transformer which transforms the key's of an array data to some  other specified keys. It also supports casting of data key's corresponding value to a specified PHP data type",
  "body": "# Transformer\r\nA simple associative (i.e. a key:value pair) data transformer which transforms the keys of an array data to some  other specified keys. It also supports casting of data values to a specified type (e.g integer, boolean, string, \\DateTime e.t.c)\r\n\r\n\r\n## What This Package Seeks To Achieve\r\n\r\n1. Streamlining the process of transforming data keys. \r\n2. Reducing cluttering of application controller  and business logic with data normalization activities such as transformation of data keys.\r\n3. Upholding the [DRY](http://www.wikipedia/dry_principle \"DRY\") principle by employing classes for different data keys transformation.\r\n\r\n\r\n\r\n## Codes To Support The Package's Claims\r\n\r\nLet first start with a code snippet that tries to present what we might normally do without this package.\r\n\r\n```php\r\n\t// An http request payload from a POST request\r\n\t$data = array(\r\n\t\t\t'title' => 'Hey, am a title',\r\n\t\t\t'description' => 'Hey, am simple description',\r\n\t\t\t'pub_date' => '2016-05-10 10:05:30',\r\n\t\t\t'comments_count' => '10',\r\n\t\t);\r\n\r\n\t// In some projects, where you have received an http request \r\n\t// payload like the above, which needs to be normalized to \r\n\t// match some specific database field names, the snippet below\r\n\t// is a representation of what we might do without this package\r\n\t// (but with this package could have been done much more fluently without    \r\n\t// cluttering our application controller or codebase);\r\n\r\n\tif (isset($data['title'])) {\r\n\t\t$data['newTitle'] = $data['title']\r\n\t\tunset($data['title']);\r\n\t}\r\n\r\n\tif (isset($data['description'])) {\r\n\t\t$data['text'] = $data['description'];\r\n\t\tunset($data['description']);\r\n\t}\r\n\r\n\tif (isset($data['pub_date'])) {\r\n\t\t$data['published_date'] = $data['pub_date'];\r\n\t\tunset($data['pub_date']);\r\n\t}\r\n\r\n\tif (isset($data['comments_count'])) {\r\n\t\t// Here, we do just type casting, from string to integer\r\n\t\t$data['comments_count'] = (int) $data['comments_count']\r\n\t}\r\n\r\n\t// Now $data contains the transformed keys with their associated data\r\n\r\n```\r\n\r\nNow let's try to use **Transformer** package to streamline and remove the clutter in the \r\nabove code snippet, even keeping our code [DRY](http://www.wikipedia/dry_principle \"DRY\") in the process.\r\n\r\n```php\r\n\t// Using the same payload($data) as in the above snippet.\r\n\r\n\t// Here, we're using composer, hence we'll pull in composer's `vendor/autoload.php` \r\n\t// file to do it magic (autoloading)\r\n\trequire 'vendor/autoload.php';\r\n\r\n\t// Also, to use this library, we'll need the `Transformer` class, so will pull it\r\n\t// in like so:\r\n\tuse Ofelix03\\Transformer\\Transformer\r\n\r\n\t// We first create a class PostTransformer that tailors our transformation \r\n\t// to our business model. This approach is recommend if we intend to use our \r\n\t// transform the same data set (payload) in different locations in our code base\r\n\r\n\t// PostTransformer is suppose to implement just 2 public methods \r\n\t// 1. createRequestKeys\r\n\t// 2. createMorphKeys\r\n\t// Both methods returns an array of key definitions which represent the definitions\r\n\t// of 'requestKeys' and 'morphKeys' as we will see in the code snippet below.\r\n\r\n\tclass PostTransformer extends Transformer {\r\n \r\n\t\t// The returned array contains the keys expected from the request \r\n\t\t// payload (.i.e $data)\r\n\t\tpublic function createRequestKeys() {\r\n\t\t\treturn array(\r\n\t\t\t\t\t'title',\r\n\t\t\t\t\t'description',\r\n\t\t\t\t\t'pub_date',\r\n\t\t\t\t\t'comments_count',\r\n\t\t\t\t);\r\n\t\t}\r\n\r\n\t\t// The returned array contains keys expected to replace the \r\n\t\t// specified keys in the createRequestKeys() in positional indexing order\r\n\t\tpublic function createMorphKeys() { \r\n\t\t\treturn array(\r\n\t\t\t\t'newTitle',\r\n\t\t\t\t'text',\r\n\t\t\t\t'published_date',  \r\n\t\t\t\t// This will cast the type of the value to a an integer \r\n\t\t\t\t'comments_count:int' \r\n\t\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t// Time to instantiate our new PostTransformer class, with the http request \r\n\t// payload ($data) we want to transform it keys, and hopefully do some casting\r\n\t// on some values that requires type casting.\r\n\t$postTransformer = new PostTransformer($data);\r\n\r\n\t// Now we transform the keys, and perform any necessary casting by invoking \r\n\t// transform() on $postTransformer like so:\r\n\t$result = $postTransformer->transform();\r\n\t\r\n\tvar_dump($result);\r\n\r\n\t// This should be the output of var_dump() the $result\r\n\tarray (5) {\r\n\t\t[\"title\"] => string(15) \"Some Post title\"\r\n\t\t[\"description\"] => string(36) \"Some post description here and there\"\r\n\t\t[\"published_status\"] => bool(true)\r\n\t\t[\"published_date\"] => string(19) \"20-06-2016 12:30:30\"\r\n\t\t[\"comments_count\"] => int(0)\r\n\t}\r\n\r\n```\r\n\r\n\r\n\r\n## Installation\r\n1. **Using composer**\r\n\r\n\t``` composer require Ofelix03\\Transformer ```\r\n\r\n\t__NB__: Make sure to ``` require vendor\\autoload.php ``` at the top of the the file you want to use the transformer package in.\r\n\tExampe: Assuming I'm using this package in a file named `main.php`, this is what my `main.php` file would look like:\r\n\r\n\t```php\r\n\t\trequire \"vendor/autoload.php\";\r\n\r\n\t\tuse Ofelix03\\Transformer\\Transformer;\r\n\r\n\t\t// Your code to use the Transformer class goes here.\r\n\t\t// Example:\r\n\t\t$transformedData = (new Transformer())->transform($payload, $reqKeys, $morphKeys);\r\n\t```\r\n\r\n2. **Using github clone**\r\n\tYou can also clone the github repository for this package\r\n\r\n\tSimply follow the laid out steps below. Make sure you already have git environment set up on your machine. You can checkout how to do so on Git's [official site](http://www.git-scm.com \"Git official site\") \r\n\r\n\t+ **Step 1**\r\n\r\n\t\tOpen your terminal and run the `git clone` command below:\r\n\t\t```php\r\n\t\t\tgit clone https:\\\\www.github.com\\ofelix03\\transformer.git\r\n\t\t```\r\n\r\n\t+ **Step 2**\r\n\r\n\t\tCopy the php files inside ```src``` directory to any location in your app directory structure and require them in this order:\r\n\r\n\t\t```php\r\n\t\t\trequire 'app/root/folder/transformer/src/TypeCaster.php';\r\n\t\t\trequire 'app/root/folder/transformer/src/KeysBag.php';\r\n\t\t\trequire 'app/root/folder/transformer/src/Transformer.php';\r\n\t\t```\r\n\r\n\r\n## Usage\r\n\r\n```php\r\n\t\r\n\t// Assume $data is the request payload that requires some of its keys \r\n\t// to be morphed into other keys.\r\n\t// This can be an http request payload or data set query from a database\r\n\t// or any  data source.\r\n\t$data = array(\r\n\t\t'title' => 'Some Post Title',\r\n\t\t'description' => 'Some post description here and there',\r\n\t\t'pub_status' => '1',\r\n\t\t'pub_date' => '20-06-2016 12:30:30',\r\n\t\t'comments_count => '10'\r\n\t);\r\n\r\n\t// Here, $reqKeys list the keys in $data which are going to \r\n\t// be transformed to some other keys defined by the $morphKeys\r\n\t$reqKeys = array(\r\n\t\t'description',\r\n\t\t'pub_status',\r\n\t\t'pub_date',\r\n\t\t'comments_count'\r\n\t);\r\n\r\n\t// $morpKeys holds a sequential listing of keys which \r\n\t// are to replace the keys specified in the $reqKeys. \r\n\t// The key listings should be have the same index position has the key it \r\n\t// would replace in the $reqKeys\r\n\t$morphKeys = array(\r\n\t\t'text',\r\n\t\t'published_status:bool',\r\n\t\t'published_date',\r\n\t\t'comments_cout:int'\r\n\t);\r\n\r\n\t// Time to transform some keys using the `\\Ofelix03\\Transformer\\Transformer` class \r\n\t// **NB**: Make sure to autoload `\\Ofelix03\\Transformer\\Transformer` class before using it, \r\n\t// else it would not work. \r\n\r\n\t$transformer = new \\Ofelix03\\Transformer\\Transformer($data, $reqKeys, $morphKeys);\r\n\r\n\t$result = $transformer->transform();\r\n\t\r\n\tvar_dump($result);\r\n\r\n\t// $result should now hold your transformed keys with their corresponding values\r\n\t// This is the result of var_dump($result)\r\n\tarray (5) {\r\n\t\t[\"title\"] => string(15) \"Some Post title\"\r\n\t\t[\"description\"] => string(36) \"Some post description here and there\"\r\n\t\t[\"published_status\"] => bool(true)\r\n\t\t[\"published_date\"] => string(19) \"20-06-2016 12:30:30\"\r\n\t\t[\"comments_count\"] => int(0)\r\n\t}\r\n\r\n```\r\n\r\n## Other API's on \\Ofelix03\\Transformer\\Tranformer \r\n* **Tranformer::isStrict(): bool**\r\n\r\n\tThis checks whether the transformation should  be done in strict mode or not. Returns boolean (TRUE|FALSE).\r\n\tIn strict mode, the library checks if the `$reqKeys` is equal in length to the `$morphKeys` and throws an exception if they are not.\r\n\r\n* **Transformer::setStrict($mode = false)**\r\n\r\n\tThis allows you to set the mode for the transformation. The default mode is `FALSE` if no argument is passed.\r\n\r\n* **Transformer::isTransformed(): bool**\r\n\r\n\tChecks whether the data (or payload) has already been transformed, this help save time, not transforming data that has already been transformed but instead getting the transformed data with `Transformer::getMorphedData()`.\r\n\r\n* **Transformer::setRequestKeys(array $reqKeys = [])** \r\n\r\n\tThis method allows you to define the $request keys after you've already created an instance of  `Ofelix03\\Transformer\\Transformer` class.\r\n\t**NB**: If this method is to be called, it should be called before calling `Transformer::transform()` else a run-time exception is thrown.\r\n\r\n* **Transformer::setMorphKeys(array $morphKeys = [])**\r\n\r\n\tThis method allows you to set the keys that are to replace the $request keys during the transformation\r\n\r\n* **Transformer::setRequestPayload(array $data)** \r\n\r\n\tThis is used to set the data that needs to be transformed. This can be used to override the request data set during the construction of the transformer object. \r\n\t**NB**: Call this method before invoking `Tranformer::transform()`\r\n\r\n* **Transformer::transform($reqPayload = [], $strictMode = false): array** \r\n\r\n\tThis is the method that does the magic -- transforming keys to other speicified keys. And also perform type casting if necessary.\r\n\r\n\t+ *$reqPayload*\r\n\t\tThis argument is optional. It's the data upon which the transformation is applied on, using the $requestKeys and $morphKeys definitions\r\n\r\n\t+ *$strictMode*\r\n\t\tThis second argument indicates the mode used for the transformation. It's optional. Remember this can also be set with the `Transformer::setStrict()` as discussed earlier.\r\n\r\n* **Transformer::getMorphedData(): array**\r\n\r\n\tThis method is called after invoking ```Transformer::tranform()``` to get the transformed data (data with it's keys morphed into other keys).\r\n\r\n\r\n## Casting\r\n\r\nThe following are the types currently supported for casting data.\r\n\r\n1. Integer (int)\r\n2. String (string)\r\n3. Array (array)\r\n4. Boolean (bool)\r\n\r\n## Feature Features\r\n\r\nPHP's [DateTime](http://php.net/manual/en/class.datetime.php \"PHP DateTime Class\") class and [Carbon](http://carbon.nesbot.com/ 'PHP Carbon Library') will be supported in the  next release. Other primitive types such as [double](http://php.net/manual/en/language.types.float.php \"Dobule\")(also known as float) and [object](http://php.net/manual/en/language.types.object.php \"Object\") will be supported with future releases.\r\n\r\n\r\n## Contributing\r\n\r\nYou can help improve this docs by sending me a pull request and hopefully I will merge it in. \r\nAlso, you spotted an error (syntax or logic error) ? I will be glad to recieve a pull request of a fix of that \r\nerror. But I would love it if you first open an issue and hopefully if it's not already in the pipes of resolution\r\nby me or someone else, I will gladly assign it to you.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}